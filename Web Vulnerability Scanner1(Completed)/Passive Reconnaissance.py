#!/usr/bin/env python
import os,time,subprocess
print "\033[1;35;50m Welcome To DK's Community!Get Ready To Hack!"
print "\033[1;31;50m Warning!Passive Reconnaissance is semi-illegal!I am not responsible for any damage that you are causing to a company/organization."
print "\033[1;35;50m Please Follow the instructions properly or else the program will not work correctly!"
print "All results will be saved under 'Scan Result' folder in current directory."
print "\033[1;31;50m Please move your previous result folder to some other location otherwise it will be overwritten."
url=raw_input('\033[0;0m Please Enter the url you want to hack in this format--> www.example.com\n');
print "Initiating The Process...Please Wait..."
time.sleep(1)
directory = os.path.join(os.getcwd(), r'Scan Result')
if not os.path.exists(directory):
    os.makedirs(directory)
currdir=os.getcwd()+"/"+"Scan Result"
userdir=os.getcwd()+'/'
try:
    def Nmap(url):
        print "\033[0;0m Please wait till Nmap Scan is Completed!"
        directory = os.path.join(currdir, r'Nmap')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen('nmap -sT -sV -O ' + url, stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Nmap/' + 'Nmap.txt', 'w+')
        file.write(result);
        file.close()
        print "Nmap Scan Completed"


    Nmap(url)


    def Whois(url):
        print "Please wait till Whois Scan is Completed!"
        directory = os.path.join(currdir, r'Whois')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen('whois ' + url[4:], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Whois/' + 'Whois.txt', 'w+')
        file.write(result);
        file.close()
        print "Whois Scan Completed"


    Whois(url)


    def Host(url):
        print "Please wait till Host Scan is Completed!"
        directory = os.path.join(currdir, r'Host')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen('host ' + url, stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Host/' + 'Host.txt', 'w+')
        file.write(result);
        file.close()
        print "Host Scan Completed"


    Host(url)


    def Trace(url):
        print "Please wait till Tracing is Completed!"
        directory = os.path.join(currdir, r'Traceroute')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen('traceroute ' + url, stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Traceroute/' + 'Trace.txt', 'w+')
        file.write(result);
        file.close()
        print "Trace Scan Completed"


    Trace(url)


    def subdomain(url):
        print "Please wait till Subdomain Scan is Completed!"
        directory = os.path.join(currdir, r'Subdomain')
        if not os.path.exists(directory):
            os.makedirs(directory)
        x = userdir + 'Sublist3r-master'
        os.chdir(x)
        process = subprocess.Popen(['python %s %s %s' % ("sublist3r.py", "-d", url[4:])], stdout=subprocess.PIPE,
                                   shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Subdomain/' + 'subdomain.txt', 'w+')
        file.write(result);
        file.close()
        print "Subdomain Scan Completed"
        os.chdir(userdir)


    subdomain(url)


    def nslookup(url):
        print "Please wait till NsLookUp is Completed!"
        directory = os.path.join(currdir, r'Nslookup')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen('nslookup ' + url[4:], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Nslookup/' + 'Nslookup.txt', 'w+')
        file.write(result);
        file.close()
        print "NsLookUp Scan Completed"


    nslookup(url)


    def harvester(url):
        print "Please wait till Harvester is Completed!"
        directory = os.path.join(currdir, r'Harvester')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen(['theharvester %s %s %s %s %s %s' % ('-d', url[4:], '-l', '500', '-b', 'google')],
                                   stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Harvester/' + 'harvester.txt', 'w+')
        file.write(result);
        file.close()
        print "Harvester Scan Completed"


    harvester(url)


    def metagoofil(url):
        print "Please wait till Metagoofil Scan is Completed!"
        directory = os.path.join(currdir, r'Metagoofil')
        if not os.path.exists(directory):
            os.makedirs(directory)
        os.chdir(currdir + '/Metagoofil')
        process = subprocess.Popen(['metagoofil %s %s %s %s %s %s %s %s %s %s %s %s' % (
        '-d', url[4:], '-t', 'doc,pdf,xls,csv,txt', '-l', '200', '-n', '50', '-o', 'files', '-f', 'data.html')],
                                   stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Metagoofil/' + 'metagoofil.txt', 'w+')
        file.write(result);
        file.close()
        print "Metagoofil Scan Completed"
        os.chdir(userdir)


    metagoofil(url)


    def dnsrecon(url):
        print "Please wait till DnsRecon and Digging is Completed!"
        directory = os.path.join(currdir, r'Dnsrecon')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen(['dnsrecon %s %s' % ('-d', url[4:])], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Dnsrecon/' + 'Dnsrecon.txt', 'w+')
        file.write(result);
        file.close()
        process = subprocess.Popen(['dig %s %s' % ('-x', url[4:])], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Dnsrecon/' + 'Dig.txt', 'w+')
        file.write(result);
        file.close()
        print "Dnsrecon and Digging Completed"


    dnsrecon(url)


    def whatweb(url):
        print "Please wait till Whatweb Scan is Completed!"
        directory = os.path.join(currdir, r'Whatweb')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen(['whatweb %s' % (url[4:])], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Whatweb/' + 'Whatweb.txt', 'w+')
        file.write(result);
        file.close()
        print "Whatweb Completed"


    whatweb(url)


    def sslscan(url):
        print "Please wait till SslScan is Completed!"
        directory = os.path.join(currdir, r'SSL')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen(['sslscan %s' % (url[4:])], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/SSL/' + 'sslscan.txt', 'w+')
        file.write(result);
        file.close()
        process = subprocess.Popen(['sslyze %s %s %s %s %s %s %s %s' % (
        '--resum', '--certinfo=basic', '--compression', '--reneg', '--sslv2', '--sslv3', '--hide_rejected_ciphers',
        url[4:])], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/SSL/' + 'sslyze.txt', 'w+')
        file.write(result);
        file.close()
        print "SSLScan Completed"


    sslscan(url)


    def a2sv(url):
        print "Please wait till A2sv Scan is Completed!"
        directory = os.path.join(currdir, r'A2sv')
        if not os.path.exists(directory):
            os.makedirs(directory)
        x = userdir + 'a2sv-master'
        os.chdir(x)
        process = subprocess.Popen(['python %s %s %s' % ("a2sv.py", "-t", url[4:])], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/A2sv/' + 'A2sv.txt', 'w+')
        file.write(result);
        file.close()
        print "A2sv Scan Completed"
        os.chdir(userdir)


    a2sv(url)


    def wafw00f(url):
        print "Please wait till Wafw00f Scan is Completed!"
        directory = os.path.join(currdir, r'Wafw00f')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen(['wafw00f %s' % ("http://" + url[4:])], stdout=subprocess.PIPE, shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Wafw00f/' + 'wafw00f.txt', 'w+')
        file.write(result);
        file.close()
        print "Wafw00f Scan Completed"


    wafw00f(url)
    print "\033[1;31;50m Please note that Xss result will not be stored in folder completely.It will be printed in terminal.Sorry for the inconvienience."


    def xss(url):
        print "\033[0;0m Please wait till Xss Scan is Completed!"
        directory = os.path.join(currdir, r'Xss')
        if not os.path.exists(directory):
            os.makedirs(directory)
        process = subprocess.Popen(['python %s %s %s %s' % ('XssPy.py', '-u', url[4:], '-v')], stdout=subprocess.PIPE,
                                   shell=True)
        result = process.stdout.read()
        file = open(currdir + '/Xss/' + 'xss.txt', 'w+')
        file.write(result);
        file.close()
        print "Xss Scan Completed"


    xss(url)
    print "\033[1;35;50m Thank You!"
except KeyboardInterrupt:
    import sys
    sys.exit(1)
